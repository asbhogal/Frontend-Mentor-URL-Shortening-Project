@use "./mixins" as *;
@use "./variables" as *;

@media only screen and (min-width: 1000px) {
  .nav-right-item {
    // added to take the login and sign up buttons out of the flow of the header and push them to the right
    position: absolute;
    right: 0;
  }
  .nav-right-item-first {
    padding-right: 150px; // pushes the login button further to the left to reflect mockup
  }
  .inner-hero-container,
  .company-stats-blocks,
  .footer-box-container {
    padding: 0 20px; // added to avoid these containers from touching the edges of the viewport between 1087px and 1000px which are typically large/landscape tablet sizes
  }
  .logo {
    padding-left: 20px; // added to avoid this from touching the edges of the viewport between 1087px and 1000px which are typically large/landscape tablet sizes
  }
  .boost-links-container {
    background-image: url(/bg-boost-desktop.svg); // removed 'public' from pathfile - all static assets in Vite are served from the public root by default, so only need to reference file from public, where public = /, if that makes sense
    //makes perfect sense, it was screaming at me, actually :) ty.
    padding: 4ch 0;
  }
  .link-shorten-container {
    // transform: translateX(-15%);
    // left: 0; // omitted as has no effect
    // right: 0; // omitted as has no effect
    //lmao ---- all this time, wow Kay, wow!
    // Eh ? Does it work? Is this normal? -- comment from 1hr ago, to remind yourself of your silliness, think.
    // transform: translateY(-50%); omitted as already set globally above
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    //
    background-image: url(/bg-shorten-desktop.svg); // removed 'public' from pathfile - all static assets in Vite are served from the public root by default, so only need to reference file from public, where public = /, if that makes sense
    height: 12ch;
    background-position: top center;
    // This is not correct. I have tried many combos, it all looks off, might be height causing an issue too. I tried.
    // that's okay, I'm inclined to keep this as it is, I think it looks perfectly fine
    background-repeat: no-repeat;
    align-items: center;
  }
  .footer-links-container {
    width: 100%; // added to better reflect mockup
    justify-content: flex-end; // added to better reflect mockup
    gap: 75px; // added to better reflect mockup
  }
  .footer-box-container {
    gap: 50px; // added to better match mockup
  }
}

// the following adds styling for the mobile menu to match the mockup better - a media query is used to ensure it only applies to the mobile menu, as the class name is the same
@media only screen and (width <= 999px) {
  // this basically says "width is less than or equal to 999px", love these expressions
  .inner-hero-container {
    // moved this and the one below here from the @media query which was at the top (@media only screen and (max-width: 999px)
    flex-direction: column; // added to match mockup
  }
  .shortend-right-section {
    flex-direction: column; // added to match mockup
    gap: 5px;
  }
  .footer-box-list .footer-box-link a {
    color: inherit; // inherits the original value so doesn't take the color value set for the a links in the header
  }
  .header-main {
    height: 95px; // added to match mockups
    .logo {
      position: relative; // added these to match mockup better and mirror the hamburger toggle. This avoids needing to restyle the header sections, while achieving a similar effect
      left: 5%;
    }
  }
  .hamburger-menu {
    @include flex-column; // ensures this only appears on smaller devices
  }
  .nav-list {
    display: flex;
    // omitted nav-list-secondary class as has been removed from markup
    flex-direction: column;
    gap: 30px; // gap is very useful for adding spacing between items, and not outside them. This can be used with either flex or grid elements.
    // I must say, it was like a treasure hunt, finding the nav items. (:
    position: absolute;
    top: 100px;
    margin: 0 auto;
    width: 80%;
    height: fit-content;
    left: 10%;
    .nav-item,
    .nav-item-m {
      font-weight: 900;
      cursor: pointer;
      // Added cursor pointer, I think it looks nicer.
      a {
        color: $pale-violet; // added for links to take own separate color in mobile menu
      }
    }
    .nav-sign-up-btn {
      display: inherit;
    }
  }
  .separator {
    height: 1px;
    background-color: $grayish-violet;
  }

  .nav-list.hidden {
    display: none;
  }

  .block-item-icon {
    top: -28px;
    left: 50%;
  }
  .footer-logo {
    margin: 0 auto; // added to centralise after footer structure changes
  }
  .footer-links-container {
    flex-direction: column; // added to match mockups after footer structure changes
    gap: 30px;
  }
  .footer-box-container {
    gap: 40px; // added to match mockups after footer structure changes
  }
  .social-list {
    width: 200px; // added to match mockups after footer structure changes
    margin: 0 auto; // added to centralise after footer structure changes
  }
}

@media screen and (min-width: 1000px) {
  .header-main {
    // @include flex-default; // omitted due to duplicate properties (with main component stylesheet)
    gap: 30px;
    justify-content: space-between;
    position: relative;
    // border: 4px solid navy; // temporarily omitted
    height: 150px; // added to match mockups
    .nav-list {
      // @include flex-default; // omitted as space-between no longer used here
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 30px;
      // position: absolute; - omitted to match mockups - was out of vertical alignment
      // top: 0;
      // top: 10%; - - omitted to match mockups - was out of vertical alignment
      // I seem to be having a fundamental issue here; I am struggling to undertand the knowledge breakdown. I dont understand why I cannot make this do what I want. -- I will likely not be satisfied with this. I am not. I am confused.
      // transform: translateY(-10%); // omitted as changing styles due to secondary ul list move
      // right: 120%; // omitted as changing styles due to secondary ul list move
      // transform: translateX(-120%); // omitted as changing styles due to secondary ul list move
      background-color: transparent;
      // width: 30%; // omitted as changing styles due to secondary ul list move
      border-radius: 0;
      // border: 2px solid green; // temporarily omitted
      color: $grayish-violet;
      font-weight: 700;
      font-size: 1rem;
    }
    .separator {
      display: none; // ensures that this only shows on the mobile menu - doesn't occupy space in the header on tablet and desktop widths
    }
    .nav-list-secondary {
      display: flex;

      /* .nav-item-m { // omitted to match mockup better
        width: 10em;
      } */
    }
  }

  .hamburger-menu {
    display: none;
  }

  .hero-container {
    @include flex-default;

    .hero-image {
      order: 1;
    }

    .hero-image,
    .hero-text {
      width: 100%;
      @include flex-column;
      // padding: 1em 5em; // omitted to match mockups - padding is now absorbed into parent container as a max-width, allowing for consistent values across different divs

      .hero-text-heading {
        // font-size: 3rem;
        text-align: left;
        line-height: 1.2;
        color: $very-dark-blue;
      }

      .hero-text-paragraph {
        // color: $grayish-violet; // omitted as already in hero stylesheet
        line-height: 1.5;
        text-align: left;
        // font-size: 1.3rem;
      }

      a {
        align-self: flex-start;
        margin-top: 1.5em;
        padding: 0.75em 2em;
      }
    }
  }

  .shortend-url {
    // @include flex-default; - removed as duplicate properties applied - flex already applied to the global property outside the media query
    flex-direction: row;
    justify-content: space-between; // changed to align more with the mockup

    .url {
      padding-top: 0;
      border-top: none;
    }

    .copy-btn {
      @include flex-default;
      border-radius: 5px; // changed to better match mockup
      width: auto;

      &:is(:hover, :focus, :active) {
        cursor: pointer;
      }
    }
  }

  .shortend-right-section {
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  //Blocks and their associated people.

  .company-stats-text {
    width: 35%; // changed to better reflect mockup
    margin: 0 auto 3.5em auto;
    padding: 0 2em;
  }

  .company-stats-blocks {
    @include flex-default;
    position: relative;
    gap: 40px;
    // padding: 0 5em;

    .block-item {
      @include flex-column;
      justify-content: space-evenly;
      position: relative;
      width: 33.333%;
      height: 270px;
      // max-height: 270px;
      // Question: above 1900px the stretchy width looks horrid. Is it an "okay" practice to add a fixed max-width here?
      // Answer: content looks okay I think for 1900+px. a fixed max-width with a width of 100% and margin: 0 auto is what I'd go for. Also, you can remove the max-height, as the height has already been explicitly set, which itself sets the maximum height. max-height would be useful if we wanted the height of the elements to be flexible up to a certain max height.
      text-align: left;

      // &:nth-of-type(1) {
      // 	position: relative;
      // 	top: -20px;
      // }

      // &:nth-of-type(3) {
      // 	position: relative;
      // 	top: 20px;
      // }
    }

    .first-block {
      position: relative;
      top: -20px;
    }

    .third-block {
      position: relative;
      top: 20px;
    }

    .seperator {
      display: none;
    }

    .block-item-icon {
      background-color: $dark-violet;
      padding: 1em;
      border-radius: 50%;
      display: block;
      margin: 0 auto;
      position: absolute;
      top: -38px;
      left: 15%;
      transform: translateX(-10%);
    }
  }

  .tree-border::before {
    content: "";
    border-top: 6px solid #19383a; // changed to meet background/foreground contrast ratio accessibility
    position: absolute;
    top: 50%;
    transform: translateX(-50deg);
    left: 100%;
    width: 100%;
  }

  // Footer

  footer {
    @include flex-default;
    align-items: flex-start;
    padding: 5em 0; // changed as left and right will be managed by max-width (to better match mockups and keep page content at same values)

    .footer-box-container {
      @include flex-default;
      align-items: flex-start;
      justify-content: space-between;
      // width: 70%; // omitted as width is now handled by max-width values in footer stylesheet
      text-align: left;

      .footer-box-link {
        // padding: 0.75em 0; // omitted to better reflect mockup - gap will be used
        a {
          // chose not to add a class for the 'a' tag as 'footer-box-link' was used for the parent - we can change this down the line if need be but not essential at this point
          text-decoration: none;
          color: inherit;
          &:hover {
            color: $cyan;
          }
        }
      }
    }
  }
}
