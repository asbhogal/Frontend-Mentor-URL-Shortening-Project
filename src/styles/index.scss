@use "./_partials/" as *;
@use "./_components/" as *;
@use "./_partials/responsive" as *;

/* * {
  font-family: $primary-font-family;
} */

body {
  font-family: $primary-font-family;
  /* max-width: 1400px; // moving this to the main class itself, as this omits the left and right margin
  width: 100%; */
  margin: 0 auto;
}

/* Explaining the above in further detail: adding the properties to the body means the browser by default is adding some margin on top. When you add it to the child container (in this case, main), then this isn't accounted for and the container just inherits the body (parent) width. For some reason the margin: 0; which I added to the body isn't therefore working. If it did, this problem shouldn't have happened. I'll look into why it isn't, maybe something I've overlooked */

// I think I understand. It makes sense. But I will think more on your explanation and if I somewhow discover it does not make sense in my head I will ask you to maybe explain it, again, if you dont mind of course.

main {
  background-color: #eaeae3;
  margin: 0 auto;
  max-width: 1440px;
  width: 100%;
  // This has been added, because, I discovered that the body with the bg looks freaking weird when above 1400. Very odd. Even I could tell that, now they are all cooped up in here and this container has the background colour. [someone also needs to make an addon that changes all my 'colour' to 'color' so i dont go "Why not work!"
  //PS: this is doing something weird at smaller screens, dont know why, but, I have spent 2-hrs making the calculations for each clamp i added in a notebook to "remember the formula" -- and I am too tired to fix it now -- or even investigate, tomorrow!
}

.bar {
  height: 0.1875rem;
  margin-top: 0.3125rem;
  width: 1.5625rem;
  background: $grayish-violet;
}

// Blocks with content

.company-stats-blocks {
  @include flex-default;
  //flex-direction: column;
  gap: 10px;
  position: relative;
}

.block-item {
  background-color: $white;
  width: 90%;
  padding: 4em 1em 0.5em 1em;
  margin: 1em auto;
  position: relative;

  h3,
  p {
    margin-bottom: 0.5em;
    line-height: 1.5;
    background-color: $white;
  }

  h3 {
    font-size: clamp(1rem, 0.8889rem + 0.5556vw, 1.375rem);
    color: $very-dark-blue;
  }

  p {
    color: $gray;
    line-height: 1.5;
    font-size: clamp(0.75rem, 0.6389rem + 0.5556vw, 1.125rem);
  }

  .block-item-icon {
    background-color: $dark-violet;
    padding: 1em;
    border-radius: 50%;
    display: block;
    margin: 0 auto;
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
  }
}

.seperator {
  border: 5px solid $cyan;
  height: 90%;
  position: absolute;
}

// For the tree lines, you can add a div called separator and give it some styling (height, width, background-color, position, top.) Set it's display to none for widths greater than or equal to 1000px, and a display of initial for widths less than or equal to 999px (since after this, at 1000px, the content flows horizontal). You will also need to remove the margin value for the .block-item when the content flows vertically (at widths equal to or less than 999px) as this prevents the separator line from 'connecting' between the blocks.

// Boost container

// Media Queries || Desktop Version || YOU'RE GETTING LOST MEDIA QUERIES HERE!!!

@media screen and (min-width: 1000px) {
  .header-main {
    @include flex-default;
    justify-content: space-between;
    position: relative;
    // border: 4px solid navy; // temporarily omitted

    .nav-list {
      @include flex-default;
      position: absolute;
      // top: 0;
      top: 10%;
      // I seem to be having a fundamental issue here; I am struggling to undertand the knowledge breakdown. I dont understand why I cannot make this do what I want. -- I will likely not be satisfied with this. I am not. I am confused.
      transform: translateY(-10%);
      right: 120%;
      transform: translateX(-120%);
      background-color: transparent;
      width: 30%;
      border-radius: 0;
      // border: 2px solid green; // temporarily omitted
      color: $grayish-violet;
      font-weight: 700;
      font-size: 1rem;
    }

    .nav-list-secondary {
      display: flex;
      position: absolute;
      left: 185%;

      .nav-item-m {
        width: 10em;
      }
    }
  }

  .hamburger-menu {
    display: none;
  }

  .hero-container {
    @include flex-default;

    .hero-image {
      order: 1;
    }

    .hero-image,
    .hero-text {
      width: 100%;
      @include flex-column;
      padding: 1em 5em;

      .hero-text-heading {
        // font-size: 3rem;
        text-align: left;
        line-height: 1.2;
        color: $very-dark-blue;
      }

      .hero-text-paragraph {
        color: $grayish-violet;
        line-height: 1.5;
        text-align: left;
        // font-size: 1.3rem;
      }

      a {
        align-self: flex-start;
        margin-top: 1.5em;
        padding: 0.75em 2em;
      }
    }
  }

  .shortend-url {
    // @include flex-default; - removed as duplicate properties applied - flex already applied to the global property outside the media query
    flex-direction: row;
    justify-content: space-between; // changed to align more with the mockup

    .url {
      padding-top: 0;
      border-top: none;
    }

    .copy-btn {
      @include flex-default;
      border-radius: 5px; // changed to better match mockup
      width: auto;

      &:is(:hover, :focus, :active) {
        cursor: pointer;
      }
    }
  }

  .shortend-right-section {
    display: flex;
    flex-direction: row;
    gap: 20px;
  }

  //Blocks and their associated people.

  .company-stats-text {
    width: 50%;
    margin: 0 auto 3.5em auto;
    padding: 0 2em;
  }

  .company-stats-blocks {
    @include flex-default;
    position: relative;
    gap: 40px;
    padding: 0 5em;

    .block-item {
      @include flex-column;
      justify-content: space-evenly;
      position: relative;
      width: 33.333%;
      height: 270px;
      // max-height: 270px;
      // Question: above 1900px the stretchy width looks horrid. Is it an "okay" practice to add a fixed max-width here?
      // Answer: content looks okay I think for 1900+px. a fixed max-width with a width of 100% and margin: 0 auto is what I'd go for. Also, you can remove the max-height, as the height has already been explicitly set, which itself sets the maximum height. max-height would be useful if we wanted the height of the elements to be flexible up to a certain max height.
      text-align: left;

      // &:nth-of-type(1) {
      // 	position: relative;
      // 	top: -20px;
      // }

      // &:nth-of-type(3) {
      // 	position: relative;
      // 	top: 20px;
      // }
    }

    .first-block {
      position: relative;
      top: -20px;
    }

    .third-block {
      position: relative;
      top: 20px;
    }

    .seperator {
      display: none;
    }

    .block-item-icon {
      background-color: $dark-violet;
      padding: 1em;
      border-radius: 50%;
      display: block;
      margin: 0 auto;
      position: absolute;
      top: -25px;
      left: 10%;
      transform: translateX(-10%);
    }
  }

  .tree-border::before {
    content: "";
    border-top: 6px solid $cyan;
    position: absolute;
    top: 50%;
    transform: translateX(-50deg);
    left: 100%;
    width: 100%;
  }

  // Footer

  footer {
    @include flex-default;
    align-items: flex-start;
    padding: 5em;

    .footer-box-container {
      @include flex-default;
      align-items: flex-start;
      justify-content: space-between;
      width: 70%;
      text-align: left;

      .footer-box-link {
        padding: 0.75em 0;
        a {
          // chose not to add a class for the 'a' tag as 'footer-box-link' was used for the parent - we can change this down the line if need be but not essential at this point
          text-decoration: none;
          color: inherit;
          &:hover {
            color: $cyan;
          }
        }
      }
    }
  }
}
